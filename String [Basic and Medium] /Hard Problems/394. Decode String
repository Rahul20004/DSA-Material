class Solution {
    public String decodeString(String s) {
        Stack<Integer> countStack = new Stack<>();
        Stack<StringBuilder> stringStack = new Stack<>();
        StringBuilder sb = new StringBuilder();
        int k = 0;

        for (char ch : s.toCharArray()) {
            if (Character.isDigit(ch)) {
                k = k * 10 + (ch - '0');
            } else if (ch == '[') {
                countStack.push(k);
                stringStack.push(sb);
                sb = new StringBuilder();
                k = 0;
            } else if (ch == ']') {
                int repeat = countStack.pop();
                StringBuilder prev = stringStack.pop();
                for (int i = 0; i < repeat; i++) {
                    prev.append(sb);
                }
                sb = prev;
            } else {
                sb.append(ch);
            }
        }

        return sb.toString();
    }
}



Explaination:
1. digit: 3 → k = 3
2. '[' → push(3), push(""), curr = ""
3. 'a' → curr = "a"
4. digit: 2 → k = 2
5. '[' → push(2), push("a"), curr = ""
6. 'c' → curr = "c"
7. ']' → pop 2, "a" → curr = "acc"
8. ']' → pop 3, "" → curr = "accaccacc"

