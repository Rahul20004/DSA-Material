Code:
class Solution {
    public boolean isAnagram(String s, String t) {
        // ‡§Ö‡§ó‡§∞ ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡•Ä length ‡§Ö‡§≤‡§ó ‡§π‡•à ‡§§‡•ã anagram ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§§‡•á
        if (s.length() != t.length()) return false;

        // 26 characters ‡§ï‡•á ‡§≤‡§ø‡§è frequency array
        int[] freq = new int[26];    // for 'a' to 'z'

        // ‡§¶‡•ã‡§®‡•ã‡§Ç strings ‡§ï‡•Ä frequency count ‡§ï‡§∞‡§®‡§æ
        for (int i = 0; i < s.length(); i++) {   
            freq[s.charAt(i) - 'a']++;  // s ‡§ï‡•á ‡§≤‡§ø‡§è increase
            freq[t.charAt(i) - 'a']--;  // t ‡§ï‡•á ‡§≤‡§ø‡§è decrease
        }

        // Check if all frequencies are zero
        for (int count : freq) {
            if (count != 0) {
                return false; // Anagram ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
            }
        }

        return true; // Anagram ‡§π‡•à
    

    }
}






















s = "anagram"
t = "nagaram"
üß† Step-by-Step Dry Run with Table:
Step	i	s.charAt(i)	t.charAt(i)	freq change	freq (snapshot)
1	0	'a'	'n'	freq[0]++ (a), freq[13]-- (n)	[1,0,0,...,-1,...]
2	1	'n'	'a'	freq[13]++ (n), freq[0]-- (a)	[0,0,0,...,0,...]
3	2	'a'	'g'	freq[0]++ (a), freq[6]-- (g)	[1,0,0,0,0,0,-1,...]
4	3	'g'	'a'	freq[6]++ (g), freq[0]-- (a)	[0,0,0,0,0,0,0,...]
5	4	'r'	'r'	freq[17]++ & freq[17]-- cancel out	no change
6	5	'a'	'a'	freq[0]++ & freq[0]-- cancel out	no change
7	6	'm'	'm'	freq[12]++ & freq[12]-- cancel out	no change

üîç Final freq[] Array:
‡§∏‡§≠‡•Ä values 0 ‡§π‡•à‡§Ç ‚Üí ‡§¶‡•ã‡§®‡•ã‡§Ç strings ‡§Æ‡•á‡§Ç letters ‡§î‡§∞ ‡§â‡§®‡§ï‡•Ä frequency ‡§∏‡§Æ‡§æ‡§® ‡§π‡•à‡§Ç‡•§

‚úÖ Output:
java
Copy
Edit
return true; // ‡§Ø‡§π ‡§¶‡•ã‡§®‡•ã‡§Ç strings anagram ‡§π‡•à‡§Ç
üß† ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§µ‡§æ‡§ï‡•ç‡§Ø:
"‡§è‡§ï ‡§¨‡§¢‡§º‡§æ‡§ì, ‡§è‡§ï ‡§ò‡§ü‡§æ‡§ì ‚Äî ‡§Ö‡§ó‡§∞ ‡§∏‡§¨ ‡§∂‡•Ç‡§®‡•ç‡§Ø ‡§π‡•ã ‡§ú‡§æ‡§è‡§Ç, ‡§§‡•ã ‡§Ö‡§®‡§æ‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§∏‡§ö‡•ç‡§ö‡§æ!"

‡§Ö‡§ó‡§∞ ‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç ‡§ö‡§æ‡§π‡•ã ‡§§‡•ã ‡§Æ‡•à‡§Ç ‡§á‡§∏‡§ï‡§æ Hindi mnemonic ‡§Ø‡§æ diagram ‡§≠‡•Ä ‡§¨‡§®‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å ‚Äî ‡§¨‡§§‡§æ‡§ì?







You said:
why -'a' ?


ChatGPT said:
Great question!

In expressions like this:

java
Copy
Edit
freq[s.charAt(i) - 'a']
ü§î Why - 'a'?
Because you're converting a character like 'a', 'b', 'c', ... 'z' into a 0-based index (i.e., index from 0 to 25) to use in an array.

üî§ Example:
Character	ASCII Value	'ch' - 'a'	Index in freq[]
'a'	97	97 - 97 = 0	0
'b'	98	98 - 97 = 1	1
'z'	122	122 - 97 = 25	25

So, s.charAt(i) - 'a' gives the correct index for any lowercase letter.

üì¶ Why is this useful?
You're using an array of size 26:

java
Copy
Edit
int[] freq = new int[26]; // index 0 -> 'a', index 1 -> 'b', ..., index 25 -> 'z'
So the - 'a' maps each lowercase letter to the correct index in this array.

üß† Mnemonic:
"ASCII trick: 'a' to zero, 'z' to twenty-five!"

Let me know if you want the same explanation in Hindi or with a diagram!
