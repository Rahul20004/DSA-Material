class MyQueue {
 
    int front, rear;             // Front and rear Pointers 
	int arr[] = new int[100005]; // Array to store queue elemnts
	
// Constructor to initialize the queue
    MyQueue()
	{
		front=0;
		rear=0;
	}
	
	//Function to push an element x into the  queue.
	void push(int x){
	    if(rear == arr.length){
	        System.out.println("Queue Overflow'"); // Queue is full
	        return;
	    }
	    arr[rear] = x;  // Insert element at rear
	    rear++;        // Increment rear
	    
	} 

    //Function to pop an element from queue and return that element.
	int pop(){
	    if(front == rear){
	        return -1;  // Queue is empty
	    }
		int poppedElement = arr[front];  // Get the front element
		front++;  // Increment front to point to next element
		return poppedElement;
	} 
}



Algorithm:
ЁЯЪА Algorithm to Implement Queue Using Array
ЁЯУЭ Step 1: Initialize Queue
Create a class MyQueue.

Define:

arr[100005] тЖТ Array to store queue elements.

front = 0 тЖТ Index pointing to the front element.

rear = 0 тЖТ Index where the next element will be inserted.

ЁЯУЭ Step 2: push(int x)
Insert element x at position arr[rear].

Increment rear by 1.

ЁЯУЭ Step 3: pop()
Check if the queue is empty:

If front == rear, return -1 (queue is empty).

Otherwise:

Get the element at arr[front].

Increment front by 1.

Return the popped element.

ЁЯУЭ Step 4: Process Queries
Read input queries.

For each query:

If query is of type 1 x тЖТ Call push(x).

If query is of type 2 тЖТ Call pop() and print the result..

ЁЯУЪ Queue Using Array - рд╕рд╡рд╛рд▓ рдХрд╛ рд╡рд┐рд╡рд░рдг (Hindi рдореЗрдВ)
ЁЯОп рд╕рд╡рд╛рд▓ рдХрд╛ рдЙрджреНрджреЗрд╢реНрдп:
рдПрдХ Queue (рдХрддрд╛рд░) рдХреЛ Array рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рд▓рд╛рдЧреВ рдХрд░рдирд╛ рд╣реИред

рджреЛ рдореБрдЦреНрдп рдСрдкрд░реЗрд╢рди рдХрд░рдиреЗ рд╣реИрдВ:

push(x):

x рдХреЛ Queue рдореЗрдВ рдЬреЛрдбрд╝рдирд╛ред

pop():

Queue рд╕реЗ рд╕рдмрд╕реЗ рдЖрдЧреЗ рдХрд╛ (front) рдПрд▓рд┐рдореЗрдВрдЯ рд╣рдЯрд╛рдирд╛ рдФрд░ рдЙрд╕реЗ рд░рд┐рдЯрд░реНрди рдХрд░рдирд╛ред

рдпрджрд┐ Queue рдЦрд╛рд▓реА рд╣реЛ рддреЛ -1 рд░рд┐рдЯрд░реНрди рдХрд░рдирд╛ред

ЁЯФе Queue рдХрд╛ рд╕рдВрдЪрд╛рд▓рди рдХреИрд╕реЗ рд╣реЛрддрд╛ рд╣реИ?
FIFO (First In, First Out) рд╕рд┐рджреНрдзрд╛рдВрдд рдкрд░ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИред

рдкрд╣рд▓рд╛ рдбрд╛рд▓рд╛ рдЧрдпрд╛ рдПрд▓рд┐рдореЗрдВрдЯ рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ рд╣рдЯрддрд╛ рд╣реИред

рдЙрджрд╛рд╣рд░рдг:

scss
Copy
Edit
push(2) тЖТ {2}
push(3) тЖТ {2, 3}
pop() тЖТ 2 рд╣рдЯреЗрдЧрд╛ рдФрд░ Queue {3} рд╣реЛ рдЬрд╛рдПрдЧреАред
ЁЯУЭ рдХреНрд╡реЗрд░реА рдкреНрд░рдХрд╛рд░ (Queries Types)
1 x

x рдХреЛ Queue рдореЗрдВ рдЬреЛрдбрд╝рдиреЗ (push) рдХрд╛ рдЖрджреЗрд╢ред

рдЙрджрд╛рд╣рд░рдг:

Copy
Edit
1 2 тЖТ 2 рдХреЛ Queue рдореЗрдВ рдЬреЛрдбрд╝реЗрдВред
1 3 тЖТ 3 рдХреЛ Queue рдореЗрдВ рдЬреЛрдбрд╝реЗрдВред
2

Queue рд╕реЗ рд╕рдмрд╕реЗ рдЖрдЧреЗ рдХрд╛ рдПрд▓рд┐рдореЗрдВрдЯ рд╣рдЯрд╛рдирд╛ (pop) рдФрд░ рдЙрд╕рдХрд╛ рдорд╛рди рдкреНрд░рд┐рдВрдЯ рдХрд░рдирд╛ред

рдпрджрд┐ Queue рдЦрд╛рд▓реА рд╣реЛ рддреЛ -1 рдкреНрд░рд┐рдВрдЯ рдХрд░реЗрдВред

рдЙрджрд╛рд╣рд░рдг:

Copy
Edit
2 тЖТ рд╕рдмрд╕реЗ рдЖрдЧреЗ рдХрд╛ рдПрд▓рд┐рдореЗрдВрдЯ рд╣рдЯрд╛рдПрдВред
рдпрджрд┐ Queue рдЦрд╛рд▓реА рд╣реЛ рддреЛ -1ред
ЁЯФО рдЙрджрд╛рд╣рд░рдг (Examples)
ЁЯУМ Example 1:
css
Copy
Edit
Input: 1 2 1 3 2 1 4 2
тЬЕ Output:
Copy
Edit
2 3
ЁЯУЪ Explanation:
1 2 тЖТ 2 рдХреЛ Queue рдореЗрдВ рдбрд╛рд▓реЛ тЖТ {2}

1 3 тЖТ 3 рдХреЛ Queue рдореЗрдВ рдбрд╛рд▓реЛ тЖТ {2, 3}

2 тЖТ 2 рдХреЛ рд╣рдЯрд╛рдУ тЖТ {3} тЖТ рдкреНрд░рд┐рдВрдЯ 2

1 4 тЖТ 4 рдХреЛ Queue рдореЗрдВ рдбрд╛рд▓реЛ тЖТ {3, 4}

2 тЖТ 3 рдХреЛ рд╣рдЯрд╛рдУ тЖТ {4} тЖТ рдкреНрд░рд┐рдВрдЯ 3

ЁЯУМ Example 2:
css
Copy
Edit
Input: 1 3 2 2 1 4
тЬЕ Output:
Copy
Edit
3 -1
ЁЯУЪ Explanation:
1 3 тЖТ 3 рдХреЛ Queue рдореЗрдВ рдбрд╛рд▓реЛ тЖТ {3}

2 тЖТ 3 рдХреЛ рд╣рдЯрд╛рдУ тЖТ Queue рдЦрд╛рд▓реА тЖТ рдкреНрд░рд┐рдВрдЯ 3

2 тЖТ Queue рдЦрд╛рд▓реА рд╣реИ тЖТ рдкреНрд░рд┐рдВрдЯ -1

1 4 тЖТ 4 рдХреЛ Queue рдореЗрдВ рдбрд╛рд▓реЛ тЖТ {4}

ЁЯУМ Example 3:
css
Copy
Edit
Input: 1 3 2 2 1 3
тЬЕ Output:
Copy
Edit
3 -1
ЁЯУЪ Explanation:
1 3 тЖТ 3 рдХреЛ Queue рдореЗрдВ рдбрд╛рд▓реЛ тЖТ {3}

2 тЖТ 3 рдХреЛ рд╣рдЯрд╛рдУ тЖТ Queue рдЦрд╛рд▓реА тЖТ рдкреНрд░рд┐рдВрдЯ 3

2 тЖТ Queue рдЦрд╛рд▓реА рд╣реИ тЖТ рдкреНрд░рд┐рдВрдЯ -1

1 3 тЖТ 3 рдХреЛ Queue рдореЗрдВ рдбрд╛рд▓реЛ тЖТ {3}

ЁЯУЪ Java Code рдХрд╛ рд╣рд┐рдВрджреА рдореЗрдВ рд╡реНрдпрд╛рдЦреНрдпрд╛ (Explanation)
java
Copy
Edit
class MyQueue {
тЬЕ MyQueue рдирд╛рдо рдХреА рдПрдХ рдХреНрд▓рд╛рд╕ рдмрдирд╛рдИ рдЧрдИ рд╣реИ рдЬрд┐рд╕рдореЗрдВ Queue рдХреЛ Array рд╕реЗ рдЗрдВрдкреНрд▓реАрдореЗрдВрдЯ рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред

ЁЯУЭ Instance Variables:
java
Copy
Edit
int front, rear;             
int arr[] = new int[100005]; 
front:

рдпрд╣ рдкрд╣рд▓реЗ рдПрд▓рд┐рдореЗрдВрдЯ (рд╕рдмрд╕реЗ рдЖрдЧреЗ рд╡рд╛рд▓реЗ) рдХреЛ рдЗрдВрдЧрд┐рдд рдХрд░рддрд╛ рд╣реИред

рд╢реБрд░реВ рдореЗрдВ front = 0 рд╣реЛрддрд╛ рд╣реИред

rear:

рдпрд╣ рдЕрдВрддрд┐рдо рдПрд▓рд┐рдореЗрдВрдЯ (рдЬрд╣рд╛рдВ рдирдпрд╛ рдПрд▓рд┐рдореЗрдВрдЯ рдЬреЛрдбрд╝рд╛ рдЬрд╛рддрд╛ рд╣реИ) рдХреЛ рдЗрдВрдЧрд┐рдд рдХрд░рддрд╛ рд╣реИред

рд╢реБрд░реВ рдореЗрдВ rear = 0 рд╣реЛрддрд╛ рд╣реИред

arr[]:

рдпрд╣ рдПрдХ Array рд╣реИ, рдЬреЛ Queue рдХреЛ рд╕реНрдЯреЛрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП 100005 рд╕рд╛рдЗрдЬ рдХрд╛ рдмрдирд╛рдпрд╛ рдЧрдпрд╛ рд╣реИред

рдЗрд╕рдореЗрдВ Queue рдХреЗ рд╕рднреА рдПрд▓рд┐рдореЗрдВрдЯреНрд╕ рдХреЛ рдХреНрд░рдордмрджреНрдз рд░реВрдк рд╕реЗ рд╕реНрдЯреЛрд░ рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред

ЁЯУЭ Constructor:
java
Copy
Edit
MyQueue() {
    front = 0;
    rear = 0;
}
тЬЕ Constructor:

рдЬрдм MyQueue рдХрд╛ рдСрдмреНрдЬреЗрдХреНрдЯ рдмрдирд╛рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ, рддреЛ front рдФрд░ rear рдХреЛ 0 рдкрд░ рдЗрдирд┐рд╢рд┐рдпрд▓рд╛рдЗрдЬрд╝ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред

Queue рдЦрд╛рд▓реА рд╣реИ рдХреНрдпреЛрдВрдХрд┐ front == rear рд╣реЛрддрд╛ рд╣реИред

ЁЯФе push(int x) - рдПрд▓рд┐рдореЗрдВрдЯ рдЬреЛрдбрд╝рдиреЗ рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ (Enqueue Operation)
java
Copy
Edit
void push(int x) {
    if (rear == arr.length) {
        System.out.println("Queue Overflow");
        return;
    }
    arr[rear] = x;
    rear++;
}
тЬЕ Algorithm (рддрд░реНрдХ):
Overflow Check:

рдпрджрд┐ rear == arr.length рд╣реЛ рдЬрд╛рдП, рддреЛ Queue рднрд░ рдЧрдИ рд╣реИ рдФрд░ "Queue Overflow" рдкреНрд░рд┐рдВрдЯ рд╣реЛрддрд╛ рд╣реИред

рдЗрд╕рдХреЗ рдмрд╛рдж, рдлрдВрдХреНрд╢рди return рдХрд░ рдЬрд╛рддрд╛ рд╣реИред

рдПрд▓рд┐рдореЗрдВрдЯ рдЬреЛрдбрд╝рдирд╛:

arr[rear] = x тЖТ x рдХреЛ Queue рдХреЗ рдЕрдВрдд рдореЗрдВ рдбрд╛рд▓реЛред

rear++ тЖТ rear рдХреЛ рдПрдХ рд╕реНрдерд╛рди рдЖрдЧреЗ рдмрдврд╝рд╛рдУ рддрд╛рдХрд┐ рдЕрдЧрд▓рд╛ рдПрд▓рд┐рдореЗрдВрдЯ рдЬреБрдбрд╝ рд╕рдХреЗред

ЁЯФе pop() - рдПрд▓рд┐рдореЗрдВрдЯ рд╣рдЯрд╛рдиреЗ рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ (Dequeue Operation)
java
Copy
Edit
int pop() {
    if (front == rear) {
        return -1;
    }
    int poppedElement = arr[front];
    front++;
    return poppedElement;
}
тЬЕ Algorithm (рддрд░реНрдХ):
Empty Queue Check:

рдпрджрд┐ front == rear, рддреЛ Queue рдЦрд╛рд▓реА рд╣реИ рдФрд░ -1 рд░рд┐рдЯрд░реНрди рд╣реЛрддрд╛ рд╣реИред

рдПрд▓рд┐рдореЗрдВрдЯ рд╣рдЯрд╛рдирд╛:

poppedElement = arr[front] тЖТ Queue рдХреЗ рд╕рдмрд╕реЗ рдЖрдЧреЗ рд╡рд╛рд▓реЗ рдПрд▓рд┐рдореЗрдВрдЯ рдХреЛ рд╣рдЯрд╛рдУ рдФрд░ рдЙрд╕реЗ poppedElement рдореЗрдВ рд╕реНрдЯреЛрд░ рдХрд░реЛред

front++ тЖТ front рдХреЛ рдЕрдЧрд▓реЗ рдПрд▓рд┐рдореЗрдВрдЯ рдХреА рдУрд░ рдмрдврд╝рд╛рдУред

Return: poppedElement рдХреЛ рд░рд┐рдЯрд░реНрди рдХрд░реЛред

ЁЯОп Queue рдХрд╛ рд╕рдВрдЪрд╛рд▓рди рдХреИрд╕реЗ рд╣реЛ рд░рд╣рд╛ рд╣реИ?
ЁЯУМ Push рдХрд╛ рдЙрджрд╛рд╣рд░рдг:
scss
Copy
Edit
push(2) тЖТ {2}
push(3) тЖТ {2, 3}
тЬЕ Queue: {2, 3}
тЬЕ front = 0, rear = 2

ЁЯУМ Pop рдХрд╛ рдЙрджрд╛рд╣рд░рдг:
scss
Copy
Edit
pop() тЖТ 2 рд╣рдЯ рдЬрд╛рдПрдЧрд╛
Queue тЖТ {3}
тЬЕ Output: 2
тЬЕ front = 1, rear = 2

scss
Copy
Edit
pop() тЖТ 3 рд╣рдЯ рдЬрд╛рдПрдЧрд╛
Queue тЖТ {}
тЬЕ Output: 3
тЬЕ front = 2, rear = 2` тЖТ Queue рдЦрд╛рд▓реА рд╣реИред

