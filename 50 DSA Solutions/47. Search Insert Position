// Binary Search O(log n)
class Solution {
    public int searchInsert(int[] nums, int target) {
        // Step 1: Initialize pointers
        int left = 0, right = nums.length -1;

        // Step 2: Binary Search loop
        while(left <= right){
            int mid = left + (right - left) / 2;
            // target found at mid
            if(nums[mid] == target){
                return mid;
            }
             // target is greater , move to right half
            else if(nums[mid] < target){
                left = mid+1;
            }
            else{
                // Target is smaller , move to left half
                right = mid - 1;
            }
        }
        return left;
    
        
        
    }
}



Explaination:
Input: nums = [1, 3, 5, 6], target = 5
left = 0, right = 3
mid = 1 → nums[1] = 3 → 3 < 5 → left = 2
mid = 2 → nums[2] = 5 → target found!
Output: 2

Input: nums = [1, 3, 5, 6], target = 2
left = 0, right = 3
mid = 1 → nums[1] = 3 → 3 > 2 → right = 0
mid = 0 → nums[0] = 1 → 1 < 2 → left = 1
No target found, insert at position 1.
Output: 1


📚 Algorithm:
🛠️ Step 1: Initialize Pointers
Set left = 0 and right = nums.length - 1.
🛠️ Step 2: Binary Search Loop
While left <= right:
Calculate mid = left + (right - left) / 2.
Check Target:
If nums[mid] == target, return mid.
If nums[mid] < target, move left pointer to mid + 1.
If nums[mid] > target, move right pointer to mid - 1.
🛠️ Step 3: Return Insert Position
If target is not found, return the position where it should be inserted → left.



