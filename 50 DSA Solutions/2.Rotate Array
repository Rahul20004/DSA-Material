 class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        // Step 1: Reduce k to within Array Length (if k > n)
        k = k % n;  

        // Step 2: Reverse Parts of Array
         
        reverse(nums, 0, n - k - 1); // Reverse the first Part
        
        reverse(nums, n - k, n - 1); // Reverse second Part
     
        reverse(nums, 0, n - 1); // Reverse the whole Array
    }
// Step 3: Define Reverse the Function
    
    public void reverse(int[] nums, int start, int end) {
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
}

Explaination: 
Input: nums = [1, 2, 3, 4, 5, 6, 7], k = 3
n = 7
k = 3 % 7 = 3

Step 1: Reverse first part
Reverse(nums, 0, 3) → [3, 2, 1, 4, 5, 6, 7]
Step 2: Reverse second part
Reverse(nums, 4, 6) → [3, 2, 1, 4, 7, 6, 5]
Step 3: Reverse whole array
Reverse(nums, 0, 6) → [5, 6, 7, 1, 2, 3, 4]
Output: [5, 6, 7, 1, 2, 3, 4]
