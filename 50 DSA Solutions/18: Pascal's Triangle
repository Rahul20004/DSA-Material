
class Solution {
    // DP Tabulation bottom up Approach
    public List<List<Integer>> generate(int numRows) {
        int[][] pascal = new int[numRows][];
                                                     // For outer rows
        for (int i = 0; i < numRows; i++){
            int[] row = new int[i + 1];
                                                     // at every row first and last are always 1
            row[0] = 1;                              // First element is always 1
            row[i] = 1;                              // Last element is always 1
            for (int j = 1; j < row.length - 1; j++){   // For Columns
                                                     // Sum of top left and top
                row[j] = pascal[i - 1][j - 1] + pascal[i - 1][j];
            }
            pascal[i] = row;    // Store the row in Pascal
        }
        return (List)Arrays.asList(pascal);  // convert to List<List<Integer>>
    }
                                            
}

// Time Complexity : O(numRows^2)


Explaination:

✅ Algorithm and Explanation:
⚡️ Step 1: Initialization
java
Copy
Edit
int[][] pascal = new int[numRows][];
Create a 2D array pascal to store the rows of Pascal's triangle.

Each row i will have i + 1 elements.

Array pascal[i] is created dynamically as we iterate through the rows.

⚡️ Step 2: Outer Loop for Rows
java
Copy
Edit
for (int i = 0; i < numRows; i++) {
Loop iterates through each row from 0 to numRows - 1.

Purpose: Create and fill the i-th row of the triangle.

⚡️ Step 3: Create Current Row
java
Copy
Edit
int[] row = new int[i + 1];
Create an array row of size i + 1.

Row 0 → 1 element, Row 1 → 2 elements, Row 2 → 3 elements, and so on.

Each row will be filled dynamically.

⚡️ Step 4: First and Last Element are Always 1
java
Copy
Edit
row[0] = 1;
row[i] = 1;
The first and last elements in any row are always 1.

✅ Example:

Row 0: [1]

Row 1: [1, 1]

Row 2: [1, _, 1]

Row 3: [1, _, _, 1]

⚡️ Step 5: Fill Middle Elements Using Previous Row
java
Copy
Edit
for (int j = 1; j < row.length - 1; j++) {
    row[j] = pascal[i - 1][j - 1] + pascal[i - 1][j];
}
Loop from 1 to row.length - 1:

Starts at 1 (after the first element).

Ends at row.length - 2 (before the last element).

Each middle element is the sum of two elements from the row above:

row[j]
=
pascal[i - 1][j - 1]
+
pascal[i - 1][j]
row[j]=pascal[i - 1][j - 1]+pascal[i - 1][j]
✅ Example for Row 3:

row[1] = pascal[2][0] + pascal[2][1] = 1 + 2 = 3

row[2] = pascal[2][1] + pascal[2][2] = 2 + 1 = 3

⚡️ Step 6: Add Row to Pascal's Triangle
java
Copy
Edit
pascal[i] = row;
Add the newly created row to the pascal array.

✅ Example:

matlab
Copy
Edit
pascal[0] = [1]
pascal[1] = [1, 1]
pascal[2] = [1, 2, 1]
pascal[3] = [1, 3, 3, 1]
⚡️ Step 7: Convert 2D Array to List
java
Copy
Edit
return (List) Arrays.asList(pascal);
Convert pascal (2D array) to a list of arrays.

✅ Purpose: LeetCode expects a List<List<Integer>>, but we are returning a casted version of Arrays.asList().


