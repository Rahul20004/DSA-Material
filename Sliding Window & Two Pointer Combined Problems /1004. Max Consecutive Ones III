class Solution {
    public int longestOnes(int[] nums, int k) {
        int start = 0, maxLength = 0, zeroCount = 0;

        for(int end = 0; end< nums.length; end++){
            if(nums[end] == 0){
                zeroCount++; // flip a zero
            }
            while(zeroCount > k){ // if too many zeros flipped , shrink the window
                if(nums[start] == 0){ 
                    zeroCount--;
                }
                start ++; // move left pointer when shrinking start
                
            }
            maxLength = Math.max(maxLength, end - start + 1);// always update       

        }
        return maxLength;
        

        
    }
}





Explaination:

Algorithm (Optimized - Sliding Window Approach)
Initialize Variables:

start = 0 (left pointer of the window).
maxLength = 0 (to store the longest sequence of 1s).
zeroCount = 0 (to track the number of flipped 0s).
Expand the Window (end pointer):

If nums[end] is 0, increment zeroCount.
If zeroCount exceeds k, shrink the window from the left (start) until zeroCount <= k.
Update the Maximum Length:

At each step, update maxLength as end - start + 1.
Return maxLength after the loop completes.

Optimized Java Code (Sliding Window)
java
Copy
Edit
class Solution {
    public int longestOnes(int[] nums, int k) {
        int start = 0, maxLength = 0, zeroCount = 0;

        for (int end = 0; end < nums.length; end++) {
            if (nums[end] == 0) {
                zeroCount++;  // Flip a zero
            }

            while (zeroCount > k) {  // If too many zeros flipped, shrink the window
                if (nums[start] == 0) {
                    zeroCount--;  // Reduce flipped count
                }
                start++;  // Move left pointer
            }

            maxLength = Math.max(maxLength, end - start + 1);
        }

        return maxLength;
    }
}
Code Explanation in Hindi
‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§∏‡§Ç‡§ï‡•ç‡§∑‡•á‡§™ ‡§Æ‡•á‡§Ç ‡§µ‡§∞‡•ç‡§£‡§®
‡§π‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§¨‡§æ‡§á‡§®‡§∞‡•Ä ‡§ê‡§∞‡•á (0 ‡§î‡§∞ 1 ‡§∏‡•á ‡§¨‡§®‡§æ) ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à, ‡§î‡§∞ ‡§π‡§Æ ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ k ‡§¨‡§æ‡§∞ 0 ‡§ï‡•ã 1 ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
‡§π‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§∏‡•á ‡§≤‡§Ç‡§¨‡•Ä 1 ‡§ï‡•Ä ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§∂‡•ç‡§∞‡•É‡§Ç‡§ñ‡§≤‡§æ (subarray) ‡§ï‡§æ ‡§Ü‡§ï‡§æ‡§∞ ‡§≤‡•å‡§ü‡§æ‡§®‡§æ ‡§π‡•à‡•§

‡§∏‡•ç‡§ü‡•á‡§™-‡§¨‡§æ‡§Ø-‡§∏‡•ç‡§ü‡•á‡§™ ‡§ï‡•ã‡§° ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ
‡§§‡•Ä‡§® ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤ ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç:

start = 0: ‡§∏‡•ç‡§≤‡§æ‡§á‡§°‡§ø‡§Ç‡§ó ‡§µ‡§ø‡§Ç‡§°‡•ã ‡§ï‡§æ ‡§¨‡§æ‡§Ø‡§æ‡§Å ‡§õ‡•ã‡§∞‡•§
maxLength = 0: ‡§∏‡§¨‡§∏‡•á ‡§≤‡§Ç‡§¨‡•Ä ‡§∂‡•ç‡§∞‡•É‡§Ç‡§ñ‡§≤‡§æ ‡§ï‡•ã ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
zeroCount = 0: ‡§´‡•ç‡§≤‡§ø‡§™ ‡§ï‡§ø‡§è ‡§ó‡§è 0 ‡§ï‡•Ä ‡§ó‡§ø‡§®‡§§‡•Ä ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
‡§è‡§∞‡•á ‡§ï‡•ã end ‡§∏‡•á ‡§á‡§ü‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç:

‡§Ö‡§ó‡§∞ nums[end] == 0, ‡§§‡•ã zeroCount++ ‡§ï‡§∞‡•á‡§Ç (‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§π‡§Æ‡§®‡•á ‡§è‡§ï 0 ‡§ï‡•ã ‡§´‡•ç‡§≤‡§ø‡§™ ‡§ï‡§ø‡§Ø‡§æ)‡•§
‡§Ö‡§ó‡§∞ zeroCount > k ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§µ‡§ø‡§Ç‡§°‡•ã ‡§ï‡•ã ‡§∂‡§ø‡§´‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç (‡§¨‡§æ‡§è‡§Å start ‡§ï‡•ã ‡§¨‡§¢‡§º‡§æ‡§è‡§Å)‡•§
‡§ú‡§¨ zeroCount <= k ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§§‡§¨ maxLength ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç:

maxLength = Math.max(maxLength, end - start + 1)
‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç maxLength ‡§ï‡•ã ‡§∞‡§ø‡§ü‡§∞‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç‡•§

Dry Run (Example 1)
Input:
java
Copy
Edit
nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Step-by-Step Table:
Step	start	end	nums[end]	zeroCount	Window (start to end)	Window Size	maxLength
1	0	0	1	0	[1]	1	1
2	0	1	1	0	[1,1]	2	2
3	0	2	1	0	[1,1,1]	3	3
4	0	3	0	1	[1,1,1,0]	4	4
5	0	4	0	2	[1,1,1,0,0]	5	5
6	0	5	0	3	[1,1,1,0,0,0]	Invalid	5
7	1	5	0	2	[1,1,0,0,0] (Shrinking)	5	5
8	2	5	0	2	[1,0,0,0]	4	5
9	3	6	1	2	[0,0,0,1]	4	5
10	3	7	1	2	[0,0,0,1,1]	5	5
11	3	8	1	2	[0,0,0,1,1,1]	6	6
12	3	9	1	2	[0,0,0,1,1,1,1]	7	6
13	3	10	0	3	[0,0,0,1,1,1,1,0]	Invalid	6
Final Output:
ini
Copy
Edit
maxLength = 6
Complexity Analysis
Time Complexity: O(n) (Each element is processed at most twice).
Space Complexity: O(1) (No extra space is used).
Summary
‚úÖ Sliding Window ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§π‡§Æ‡§®‡•á O(n) ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§®‡§ø‡§ï‡§æ‡§≤‡§æ‡•§
‚úÖ ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ k 0 ‡§ï‡•ã 1 ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§∏‡§¨‡§∏‡•á ‡§≤‡§Ç‡§¨‡•Ä 1 ‡§ï‡•Ä ‡§∂‡•ç‡§∞‡•É‡§Ç‡§ñ‡§≤‡§æ ‡§ï‡§æ ‡§Ü‡§ï‡§æ‡§∞ ‡§™‡§æ‡§Ø‡§æ‡•§
‚úÖ Company Interviews ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π Code Optimize ‡§π‡•à! üöÄ







You said:
question ek bar aur samjao
ChatGPT said:
‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•ã ‡§Ö‡§ö‡•ç‡§õ‡•á ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§§‡•á ‡§π‡•à‡§Ç üßê
‡§π‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§¨‡§æ‡§á‡§®‡§∞‡•Ä ‡§ê‡§∞‡•á (nums[]) ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à, ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§∏‡§ø‡§∞‡•ç‡§´ 0 ‡§î‡§∞ 1 ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§
‡§π‡§Æ‡•á‡§Ç k ‡§¨‡§æ‡§∞ ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ 0 ‡§ï‡•ã 1 ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§
‡§Ö‡§¨ ‡§π‡§Æ‡•á‡§Ç ‡§Ø‡§π ‡§¨‡§§‡§æ‡§®‡§æ ‡§π‡•à ‡§ï‡§ø ‡§∏‡§¨‡§∏‡•á ‡§≤‡§Ç‡§¨‡•Ä "1" ‡§ï‡•Ä ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§∂‡•ç‡§∞‡•É‡§Ç‡§ñ‡§≤‡§æ (subarray) ‡§ï‡§ø‡§§‡§®‡•Ä ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§

Example 1:
Input:
java
Copy
Edit
nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Explanation:
‡§π‡§Æ‡•á‡§Ç ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ k = 2 ‡§¨‡§æ‡§∞ 0 ‡§ï‡•ã 1 ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§π‡•à‡•§
‡§Ö‡§ó‡§∞ ‡§π‡§Æ ‡§Ü‡§ñ‡§ø‡§∞‡•Ä ‡§µ‡§æ‡§≤‡•á ‡§¶‡•ã 0 (‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ 3 ‡§î‡§∞ 4) ‡§ï‡•ã 1 ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§¶‡•á‡§Ç, ‡§§‡•ã ‡§ê‡§∞‡•á ‡§ê‡§∏‡§æ ‡§¨‡§®‡•á‡§ó‡§æ:

ini
Copy
Edit
nums = [1,1,1,1,1,0,1,1,1,1,1]
‡§Ö‡§¨ ‡§á‡§∏ ‡§ê‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§∏‡•á ‡§≤‡§Ç‡§¨‡§æ 1 ‡§ï‡•Ä ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§∂‡•ç‡§∞‡•É‡§Ç‡§ñ‡§≤‡§æ = 6 ‡§π‡•à‡•§

Output: 6 ‚úÖ
Example 2:
Input:
java
Copy
Edit
nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Explanation:
‡§Ö‡§ó‡§∞ ‡§π‡§Æ k = 3 ‡§¨‡§æ‡§∞ ‡§§‡•Ä‡§® 0 ‡§ï‡•ã 1 ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§¶‡•á‡§Ç, ‡§§‡•ã ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§ê‡§∞‡•á ‡§ê‡§∏‡§æ ‡§¨‡§®‡•á‡§ó‡§æ:

ini
Copy
Edit
nums = [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
‡§Ö‡§¨ ‡§á‡§∏‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§∏‡•á ‡§≤‡§Ç‡§¨‡•Ä 1 ‡§ï‡•Ä ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§∂‡•ç‡§∞‡•É‡§Ç‡§ñ‡§≤‡§æ = 10 ‡§π‡•à‡•§

Output: 10 ‚úÖ
‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂
‚úÖ ‡§π‡§Æ‡•á‡§Ç 0 ‡§ï‡•ã 1 ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è k ‡§¨‡§æ‡§∞ ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§
‚úÖ ‡§Ö‡§¨ ‡§π‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§∏‡•á ‡§≤‡§Ç‡§¨‡§æ 1 ‡§ï‡•Ä ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§∂‡•ç‡§∞‡•É‡§Ç‡§ñ‡§≤‡§æ (subarray) ‡§ï‡§æ ‡§Ü‡§ï‡§æ‡§∞ ‡§®‡§ø‡§ï‡§æ‡§≤‡§®‡§æ ‡§π‡•à‡•§
‚úÖ ‡§á‡§∏‡•á ‡§π‡§Æ Sliding Window Approach ‡§∏‡•á O(n) ‡§∏‡§Æ‡§Ø ‡§Æ‡•á‡§Ç ‡§π‡§≤ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ üöÄ
