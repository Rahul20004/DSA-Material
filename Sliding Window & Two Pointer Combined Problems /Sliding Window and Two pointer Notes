Sliding Window and Two Pointer Techniques - Explanation & Usage
1. Sliding Window Technique
The Sliding Window is an optimization technique used for solving problems related to subarrays or subsequences efficiently. Instead of iterating through all possible subarrays, we use a fixed or variable-sized "window" that moves across the array or string.

Types of Sliding Window
Fixed-Size Sliding Window: The window size remains constant.
Example: Find the maximum sum of any subarray of size K.
Variable-Size Sliding Window: The window size changes dynamically based on the problem conditions.
Example: Find the smallest subarray with a sum â‰¥ X.
Example - Maximum Sum of K-Size Subarray
ðŸ”¹ Problem: Find the maximum sum of any subarray of size K.
ðŸ”¹ Input: arr = [2, 1, 5, 1, 3, 2], K = 3
ðŸ”¹ Output: 9 (because [5, 1, 3] gives the highest sum)

ðŸ”¹ Brute Force Approach (O(N*K)):
Generate all possible subarrays and calculate their sum.

ðŸ”¹ Sliding Window Approach (O(N)):

First, calculate the sum of the first K elements.
Then, slide the window one step to the right by removing one element from the left and adding one from the right.

print(maxSumSubarray(arr, k))  # Output: 9
âœ… Time Complexity: O(N), since each element is processed only once.

2. Two Pointer Technique
The Two Pointer technique is an efficient searching and optimization approach for solving problems in arrays and strings. It involves maintaining two pointers (indexes) that traverse the array in a specific manner.

Types of Two Pointer Approach
Opposite Direction Two Pointers: One pointer starts from the beginning, the other from the end.
Example: Finding two numbers in a sorted array that sum to a target.
Same Direction Two Pointers: Both pointers move in the same direction.
Example: Removing duplicates from a sorted array.
Example - Two Sum in a Sorted Array
ðŸ”¹ Problem: Given a sorted array, find two numbers whose sum equals a given target.
ðŸ”¹ Input: arr = [1, 2, 3, 4, 6], target = 6
ðŸ”¹ Output: [1, 3] (because 2 + 4 = 6)

ðŸ”¹ Two Pointer Approach (O(N)):

Place one pointer at the start (left) and the other at the end (right).
If arr[left] + arr[right] == target, return the pair.
If the sum is too small, move left++ to increase the sum.
If the sum is too large, move right-- to decrease the sum.

âœ… Time Complexity: O(N), since we traverse the array only once.

ðŸ”¹ Sliding Window vs Two Pointer - When to Use What?
Technique	When to Use?
Sliding Window	When dealing with subarrays or substrings, such as max/min sum subarray, longest/shortest substring, K-sized subarrays, etc.
Two Pointer	When dealing with searching and sorting problems, such as pair sum, three sum, removing duplicates, merging sorted arrays, etc.
If a problem is related to subarrays or substrings, think of Sliding Window first.
If a problem is related to searching, sorting, or pairs, think of Two Pointer first.

ðŸ”¹ Conclusion
Sliding Window is useful when working with contiguous subarrays or subsequences.
Two Pointer is useful when working with searching, sorting, and pair-related problems.
Both techniques help optimize time complexity and solve problems efficiently in O(N).
ðŸš€ Let me know if you have any doubts! ðŸ˜Š







You said:
always give java example
ChatGPT said:
Memory updated
Here are the Java implementations for Sliding Window and Two Pointer techniques:

1. Sliding Window Technique (Fixed Size)
ðŸ”¹ Problem: Find the maximum sum of any subarray of size K.

ðŸ”¹ Java Code:

java
Copy
Edit
class SlidingWindow {
    public static int maxSumSubarray(int[] arr, int k) {
        int n = arr.length;
        int maxSum = Integer.MIN_VALUE;
        int windowSum = 0;

        // Calculate sum of first K elements
        for (int i = 0; i < k; i++) {
            windowSum += arr[i];
        }
        maxSum = windowSum;

        // Slide the window
        for (int i = k; i < n; i++) {
            windowSum += arr[i] - arr[i - k]; // Add new element, remove old one
            maxSum = Math.max(maxSum, windowSum);
        }

        return maxSum;
    }

    public static void main(String[] args) {
        int[] arr = {2, 1, 5, 1, 3, 2};
        int k = 3;
        System.out.println(maxSumSubarray(arr, k)); // Output: 9
    }
}
âœ… Time Complexity: O(N)

2. Two Pointer Technique (Two Sum in Sorted Array)
ðŸ”¹ Problem: Find two numbers whose sum equals a given target in a sorted array.

ðŸ”¹ Java Code:

java
Copy
Edit
class TwoPointer {
    public static int[] twoSum(int[] arr, int target) {
        int left = 0, right = arr.length - 1;

        while (left < right) {
            int sum = arr[left] + arr[right];

            if (sum == target) {
                return new int[]{left, right}; // Return indices
            } else if (sum < target) {
                left++;  // Increase sum by moving left pointer
            } else {
                right--; // Decrease sum by moving right pointer
            }
        }

        return new int[]{-1, -1}; // No pair found
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 6};
        int target = 6;
        int[] result = twoSum(arr, target);
        System.out.println(result[0] + ", " + result[1]); // Output: 1, 3
    }
}
âœ… Time Complexity: O(N)

ðŸ”¹ Sliding Window vs Two Pointer - When to Use?
Technique	Use Case
Sliding Window	When dealing with subarrays or substrings (e.g., max/min sum, longest substring, etc.)
Two Pointer	When dealing with searching/sorting problems (e.g., pair sum, three sum, removing duplicates, etc.)
ðŸ’¡ Always think of Sliding Window for subarrays and Two Pointers for searching/sorting problems!

ðŸš€ Let me know if you need more Java examples! ðŸ˜Š
